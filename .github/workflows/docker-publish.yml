name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Read package.json
      id: package
      run: |
        echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
        echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        echo "docker_container_name=$(node -p "require('./package.json').docker_container_name || require('./package.json').name")" >> $GITHUB_OUTPUT

    - name: Debug - Show package.json info
      run: |
        echo "=== PACKAGE.JSON DEBUG ==="
        echo "Package name: ${{ steps.package.outputs.name }}"
        echo "Package version: ${{ steps.package.outputs.version }}"
        echo "Docker container name: ${{ steps.package.outputs.docker_container_name }}"
        echo "=========================="

    - name: Debug - Show environment and secrets info
      run: |
        echo "=== ENVIRONMENT DEBUG ==="
        echo "GitHub repository: ${{ github.repository }}"
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub event: ${{ github.event_name }}"
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Docker username length: ${#DOCKER_USERNAME}"
        echo "Docker password length: ${#DOCKER_PASSWORD}"
        echo "Is pull request: ${{ github.event_name == 'pull_request' }}"
        echo "Is default branch: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}"
        echo "========================="
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Debug - Construct image name
      id: image_name
      run: |
        IMAGE_NAME="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ steps.package.outputs.name }}"
        echo "=== IMAGE NAME DEBUG ==="
        echo "Full image name: $IMAGE_NAME"
        echo "Registry: ${{ env.REGISTRY }}"
        echo "Username: ${{ secrets.DOCKER_USERNAME }}"
        echo "Package name: ${{ steps.package.outputs.name }}"
        echo "Final format: docker.io/USERNAME/PACKAGE"
        echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "========================"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Debug - Test Docker Hub connectivity
      if: github.event_name != 'pull_request'
      run: |
        echo "=== DOCKER HUB CONNECTIVITY TEST ==="
        echo "Testing Docker Hub connectivity..."
        curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/ || echo "Repository may not exist or private"
        echo "Testing Docker Hub auth endpoint..."
        curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ secrets.DOCKER_USERNAME }}/${{ steps.package.outputs.name }}:pull" || echo "Auth test failed"
        echo "=================================="

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Debug - Verify Docker login
      if: github.event_name != 'pull_request'
      run: |
        echo "=== DOCKER LOGIN VERIFICATION ==="
        echo "Checking Docker login status..."
        docker info | grep -E "(Username|Registry)" || echo "No login info found"
        echo "Testing push permissions..."
        echo "FROM alpine:latest" | docker build -t test-image:latest -
        docker tag test-image:latest ${{ secrets.DOCKER_USERNAME }}/test-image:latest || echo "Tagging failed"
        echo "=================================="

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.image_name.outputs.image_name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Debug - Show metadata
      run: |
        echo "=== METADATA DEBUG ==="
        echo "Images: ${{ steps.meta.outputs.images }}"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Labels: ${{ steps.meta.outputs.labels }}"
        echo "JSON: ${{ steps.meta.outputs.json }}"
        echo "======================"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Debug - Show build results
      if: github.event_name != 'pull_request'
      run: |
        echo "=== BUILD RESULTS ==="
        echo "Build completed successfully!"
        echo "Pushed tags: ${{ steps.meta.outputs.tags }}"
        echo "Image digest will be available in Docker Hub"
        echo "====================="

    - name: Update Docker Hub description
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ secrets.DOCKER_USERNAME }}/${{ steps.package.outputs.name }}
        readme-filepath: ./README.md

    - name: Debug - Final summary
      if: github.event_name != 'pull_request'
      run: |
        echo "=== FINAL SUMMARY ==="
        echo "‚úÖ Workflow completed successfully!"
        echo "üê≥ Docker image: ${{ steps.image_name.outputs.image_name }}"
        echo "üè∑Ô∏è Tags pushed: ${{ steps.meta.outputs.tags }}"
        echo "üåê Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ steps.package.outputs.name }}"
        echo "=====================" 