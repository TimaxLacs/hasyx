#!/usr/bin/env node

import { AskHasyx, AskOptions, ensureOpenRouterApiKey } from 'hasyx/lib/ask-hasyx';

export class Ask extends AskHasyx {
  constructor(token: string, projectName: string = 'Unknown Project') {
    // Project-specific system prompt
    const systemPrompt = `You are an AI assistant for the "${projectName}" project.

We are working together on this project. When we need to execute code, analyze data, or perform operations, we work as a team.

**Communication Guidelines:**
- Always use "we" when referring to our work together ("we implemented", "we will try", "we observed", "we succeeded", "we agree", "we made a mistake")
- Execute code ONLY when calculations, demonstrations, or verification are actually needed
- For simple questions, conversations, or general knowledge - respond directly without code execution
- Use proper error handling and provide helpful explanations
- Keep responses focused and practical

**Important:** Don't separate yourself from the user - we are working together as a team. Only execute code when it's actually necessary to answer the question.`;

    // Call parent constructor with project-specific configuration
    super(
      token,
      {}, // context
      {
        model: 'google/gemini-2.5-flash-preview',
        temperature: 0.1,
        max_tokens: 2048
      }, // options
      systemPrompt, // system prompt
      {
        exec: true,
        execTs: true,
        terminal: true
      } // ask options - enable all engines by default
    );
  }
}

export const ask = new Ask(
  process?.env?.OPENROUTER_API_KEY || 'dummy-key-for-testing',
  process?.env?.npm_package_name || 'Unknown Project'
);

// Run REPL if this file is executed directly
if (typeof require !== 'undefined' && require.main === module) {
  (async () => {
    // Ensure OpenRouter API Key is configured
    await ensureOpenRouterApiKey();
    
    // Recreate Ask instance with the new API key if needed
    if (process.env.OPENROUTER_API_KEY && process.env.OPENROUTER_API_KEY !== 'dummy-key-for-testing') {
      const newAsk = new Ask(
        process.env.OPENROUTER_API_KEY,
        process?.env?.npm_package_name || 'Unknown Project'
      );
      
      // Copy settings from old instance
      Object.assign(ask, newAsk);
    }
    
    // Start REPL
    ask.repl().catch((error) => {
      console.error('‚ùå Error in ask REPL:', error);
      process.exit(1);
    });
  })();
} 