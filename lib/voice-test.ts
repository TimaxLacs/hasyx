import AudioDeviceManager from './voice-device';
import { AskHasyx, ensureOpenRouterApiKey } from 'hasyx/lib/ask-hasyx';
import AdmZip from 'adm-zip';
import path from 'path';
// @ts-ignore
import * as vosk from 'vosk';
import * as fs from 'fs';
import * as https from 'https';
import { spawn } from 'child_process';

const DEFAULT_MODEL_STT = 'vosk-model-small-ru-0.22';
const MODEL_PATH = path.resolve(__dirname, './models', DEFAULT_MODEL_STT);
const SAMPLE_RATE = 16000;

class Voice{
    private apikey: string;
    private model?: string;
    private temperature?: number;
    private max_tokens?: number;
    private system_prompt?: string;
    private output_handlers: any;
    private defaultInputDevice: any;
    private defaultOutputDevice: any;
    private devices: any[];
    private wakeWord: string;
    private silenceThreshold: number;
    
    constructor(
        apikey: string, 
        model?: string, 
        temperature?: number, 
        max_tokens?: number, 
        system_prompt?: string,
        defaultInputDevice?: any,
        defaultOutputDevice?: any,
        devices?: any[],
        wakeWord: string = '–∞–ª–∏—Å–∞',
        silenceThreshold: number = 2000
    ) {
        this.apikey = apikey;
        this.model = model;
        this.temperature = temperature;
        this.max_tokens = max_tokens;
        this.system_prompt = system_prompt;
        this.output_handlers = {};
        this.defaultInputDevice = defaultInputDevice;
        this.defaultOutputDevice = defaultOutputDevice;
        this.devices = devices || [];
        this.wakeWord = wakeWord.toLowerCase();
        this.silenceThreshold = silenceThreshold;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        this.initialize();
    }

    private async initialize(): Promise<void> {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            await this.device();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
            await this.modelSTT();
            
            // –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await this.transcribe();

            // await this.ask('–≤—ã–≤–µ–¥–∏ –º–Ω–µ —Ç–æ—á–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    public async device(): Promise<void> {
        const manager = new AudioDeviceManager();
        await manager.initialize();
        
        const { defaultInputDevice, defaultOutputDevice } = manager.findDefaultDevices();
        const devices = manager.getDevices();
        
        this.defaultInputDevice = defaultInputDevice;
        this.defaultOutputDevice = defaultOutputDevice;
        this.devices = devices;

        console.log('–ù–∞–π–¥–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:');
        console.log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω:', this.defaultInputDevice?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('–î–∏–Ω–∞–º–∏–∫–∏:', this.defaultOutputDevice?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    public async modelSTT(): Promise<void> {
        if (fs.existsSync(path.resolve(__dirname, './models', DEFAULT_MODEL_STT))) {
            console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${DEFAULT_MODEL_STT} –Ω–∞–π–¥–µ–Ω–∞.`);
            return;
        }

        const modelUrl = 'https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip';
        const zipPath = path.resolve(__dirname, './models/vosk-model.zip');
        
        if (fs.existsSync(zipPath)) {
            console.log('üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π zip-—Ñ–∞–π–ª –º–æ–¥–µ–ª–∏...');
            fs.unlinkSync(zipPath);
        }

        console.log('‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...');
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å ${modelUrl}`);
        
        await new Promise<void>((resolve, reject) => {
            const file = fs.createWriteStream(zipPath);
            let downloadedBytes = 0;
            let totalBytes = 0;

            https.get(modelUrl, (response) => {
                totalBytes = parseInt(response.headers['content-length'] || '0', 10);
                console.log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(totalBytes / 1024 / 1024).toFixed(2)}MB`);
                
                response.on('data', (chunk) => {
                    downloadedBytes += chunk.length;
                    const progress = (downloadedBytes / totalBytes * 100).toFixed(2);
                    process.stdout.write(`\rüì• –ó–∞–≥—Ä—É–∑–∫–∞: ${progress}% (${(downloadedBytes / 1024 / 1024).toFixed(2)}MB)`);
                });

                response.on('end', () => {
                    process.stdout.write('\n');
                    file.end();
                });

                response.pipe(file);
                
                file.on('finish', () => {
                    file.close();
                    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
                    resolve();
                });
            }).on('error', (err) => {
                fs.unlink(zipPath, () => {});
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏:', err);
                reject(err);
            });
        });
    
        try {
            console.log('üì¶ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –º–æ–¥–µ–ª–∏...');
            const zip = new AdmZip(zipPath);
            const zipEntries = zip.getEntries();
            const rootDir = zipEntries[0].entryName.split('/')[0];
            
            console.log(`üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ${zipEntries.length} —Ñ–∞–π–ª–æ–≤...`);
            
            const modelsDir = path.resolve(__dirname, './models');
            if (!fs.existsSync(modelsDir)) {
                fs.mkdirSync(modelsDir, { recursive: true });
            }
            
            zip.extractAllTo(modelsDir, true);
            console.log(`üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${zipEntries.length} —Ñ–∞–π–ª–æ–≤`);
            
            console.log('üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
            fs.renameSync(path.resolve(modelsDir, rootDir), MODEL_PATH);
            
            console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏:', err);
            if (fs.existsSync(zipPath)) {
                fs.unlinkSync(zipPath);
                console.log('üóëÔ∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π zip-—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.');
            }
            throw err;
        } finally {
            if (fs.existsSync(MODEL_PATH) && fs.existsSync(zipPath)) {
                fs.unlinkSync(zipPath);
                console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π zip-—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.');
            }
        }
    }

    public async ask(command: string): Promise<string> {
        try {
            await ensureOpenRouterApiKey();
            
            const options: any = {
                stream: true // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            };
            if (this.model) options.model = this.model;
            if (this.temperature) options.temperature = this.temperature;
            if (this.max_tokens) options.max_tokens = this.max_tokens;
            
            const ask = new AskHasyx(
                this.apikey,
                { command },
                options
            );

            console.log('\nü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
            
            let fullResponse = '';
            const stream = await ask.askStream(command);
            
            return new Promise((resolve, reject) => {
                stream.subscribe({
                    next: (chunk: string) => {
                        process.stdout.write(chunk);
                        fullResponse += chunk;
                    },
                    error: (error: any) => {
                        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                        reject(error);
                    },
                    complete: () => {
                        console.log('\n‚úÖ –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–ª—É—á–µ–Ω');
                        resolve(fullResponse);
                    }
                });
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
            return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏';
        }
    }

    public async transcribe(): Promise<void> {
        console.log('üé§ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...');
        console.log(`üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: "${this.wakeWord}"`);
    
        if (!fs.existsSync(MODEL_PATH)) {
            console.error(`‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${MODEL_PATH}`);
            console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å...');
            await this.modelSTT();
            if (!fs.existsSync(MODEL_PATH)) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –í—ã—Ö–æ–¥.');
                return;
            }
        }
    
        vosk.setLogLevel(-1);
        const model = new vosk.Model(MODEL_PATH);
        const recognizer = new vosk.Recognizer({ model: model, sampleRate: SAMPLE_RATE });
    
        if (!this.defaultInputDevice) {
            console.warn('‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å...');
            await this.device();
            if (!this.defaultInputDevice) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞. –í—ã—Ö–æ–¥.');
                recognizer.free();
                model.free();
                return;
            }
        }
    
        console.log(`üéß –ò—Å–ø–æ–ª—å–∑—É—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞: ${this.defaultInputDevice.name}`);
    
        const arecord = spawn('arecord', [
            '-D', 'plug:default',
            '-f', 'S16_LE',
            '-r', String(SAMPLE_RATE),
            '-c', '1',
            '-t', 'raw'
        ]);

        let lastPartialResult = '';
        let commandBuffer: string[] = [];
        let isListening = false;
        let lastSpeechTime = Date.now();
        let isProcessing = false;

        const checkSilence = async () => {
            if (isListening && !isProcessing && (Date.now() - lastSpeechTime) > this.silenceThreshold) {
                if (commandBuffer.length > 0) {
                    const fullCommand = commandBuffer.join(' ');
                    console.log('\nüìù –ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', fullCommand);
                    
                    // –°–±—Ä–æ—Å –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    commandBuffer = [];
                    isListening = false;
                    isProcessing = true;
                    
                    try {
                        await this.ask(fullCommand);
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:', error);
                    }
                    
                    isProcessing = false;
                    console.log('\nüëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...');
                }
            }
        };

        const silenceCheckInterval = setInterval(checkSilence, 100);
    
        arecord.stdout.on('data', (data) => {
            if (recognizer.acceptWaveform(data)) {
                const result = recognizer.result();
                if (result.text) {
                    const text = result.text.toLowerCase();
                    lastSpeechTime = Date.now();

                    if (!isListening && text.includes(this.wakeWord)) {
                        isListening = true;
                        console.log(`\nüéØ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...`);
                        commandBuffer.push(result.text);
                        console.log(`üé§ –ö–æ–º–∞–Ω–¥–∞: ${result.text}`);
                        lastPartialResult = '';
                        return;
                    }

                    if (isListening) {
                        const lastBuffer = commandBuffer[commandBuffer.length - 1] || '';
                        if (!lastBuffer.includes(text) && !text.includes(lastBuffer)) {
                            commandBuffer.push(result.text);
                            console.log(`üé§ –ö–æ–º–∞–Ω–¥–∞: ${result.text}`);
                        }
                        lastPartialResult = '';
                    }
                }
            } else {
                const partialResult = recognizer.partialResult();
                if (partialResult.partial && isListening && partialResult.partial !== lastPartialResult) {
                    console.log(`üé§ –ö–æ–º–∞–Ω–¥–∞: ${partialResult.partial}`);
                    lastPartialResult = partialResult.partial;
                }
            }
        });
    
        arecord.stderr.on('data', (data) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ arecord: ${data}`);
        });
    
        const cleanup = () => {
            console.log('\n–í—ã–ø–æ–ª–Ω—è—é –æ—á–∏—Å—Ç–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
            clearInterval(silenceCheckInterval);
            arecord.kill();
            recognizer.free();
            model.free();
        };
        
        process.on('SIGINT', () => {
            cleanup();
            process.exit(0);
        });
        
        arecord.on('close', (code) => {
            if (code !== 0 && code !== null) { 
                 console.log(`arecord –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
            }
            cleanup();
        });
    
        console.log('‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω. –ì–æ–≤–æ—Ä–∏—Ç–µ... (–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C)');
        console.log('üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...');
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
const voice = new Voice(
    process.env.OPENROUTER_API_KEY!,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    '–∞–ª–∏—Å–∞', // –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    2000    // –ø–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
);
