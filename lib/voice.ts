// –ò–º–ø–æ—Ä—Ç—ã
import AudioDeviceManager from './voice-device';
// @ts-ignore
import * as vosk from 'vosk';
import * as fs from 'fs';
import { Readable } from 'stream';
// @ts-ignore
import * as wav from 'wav';
import { spawn } from 'child_process';
import * as os from 'os';
import * as https from 'https';
import AdmZip from 'adm-zip';
import path from 'path';

// --- –ù–ê–°–¢–†–û–ô–ö–ò --- //
const MODEL_PATH = 'vosk-model-small-ru-0.22';
const SAMPLE_RATE = 16000;
const DEBUG_FILE = 'debug_audio.wav';
const SILENCE_THRESHOLD = 500; // –ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã (0-32767)
const CONTEXT_BUFFER_SIZE = SAMPLE_RATE * 5; // 5 —Å–µ–∫—É–Ω–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const PROCESSING_BUFFER_SIZE = SAMPLE_RATE * 0.5 * 2; // 0.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
enum State {
    LISTENING,    // –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    PROCESSING    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
 * –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö –≤ –∫–æ–Ω—Å–æ–ª—å.
 */
async function testAudioDevices() {
    console.log('=== –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–∏—Å—Ç–µ–º—ã ===');
    
    try {
        const manager = new AudioDeviceManager();
        await manager.initialize();
        
        const { defaultInputDevice, defaultOutputDevice } = manager.findDefaultDevices();
        const devices = manager.getDevices();
        
        console.log('\n=== –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===');
        
        if (defaultInputDevice) {
            console.log('\n–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:');
            console.log(`  ID: ${defaultInputDevice.id}`);
            console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${defaultInputDevice.name}`);
            console.log(`  –ö–∞–Ω–∞–ª–æ–≤: ${defaultInputDevice.inputChannels}`);
            console.log(defaultOutputDevice);
        } else {
            console.log('\n–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (defaultOutputDevice) {
            console.log('\n–î–∏–Ω–∞–º–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:');
            console.log(`  ID: ${defaultOutputDevice.id}`);
            console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${defaultOutputDevice.name}`);
            console.log(`  –ö–∞–Ω–∞–ª–æ–≤: ${defaultOutputDevice.outputChannels}`);
        } else {
            console.log('\n–î–∏–Ω–∞–º–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        console.log('\n=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===');
    } catch (error) {
        console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
    }
}
testAudioDevices();
/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
 */
async function ensureModelExists() {
    if (fs.existsSync(MODEL_PATH)) {
        console.log('‚úÖ –ú–æ–¥–µ–ª—å Vosk —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        return;
    }

    console.log('‚è≥ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...');
    const modelUrl = 'https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip';
    const zipPath = path.resolve(__dirname, '../vosk-model.zip');
    
    await new Promise<void>((resolve, reject) => {
        const file = fs.createWriteStream(zipPath);
        https.get(modelUrl, (response) => {
            response.pipe(file);
            file.on('finish', () => {
                file.close();
                console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
                resolve();
            });
        }).on('error', (err) => {
            fs.unlink(zipPath, () => {});
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏:', err);
            reject(err);
        });
    });

    try {
        console.log(' unpacking model...');
        const zip = new AdmZip(zipPath);
        const zipEntries = zip.getEntries();
        const rootDir = zipEntries[0].entryName.split('/')[0];
        
        zip.extractAllTo(path.resolve(__dirname, '../'), true);
        fs.renameSync(path.resolve(__dirname, '../', rootDir), path.resolve(__dirname, '../', MODEL_PATH));
        
        console.log('‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–∞.');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –º–æ–¥–µ–ª–∏:', err);
    } finally {
        fs.unlinkSync(zipPath);
        console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π zip-—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.');
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
async function main() {
    await ensureModelExists();

    const model = new vosk.Model(MODEL_PATH);
    const recognizer = new vosk.Recognizer({ model: model, sampleRate: SAMPLE_RATE });
    
    const fileWriter = new wav.Writer({
        channels: 1,
        sampleRate: SAMPLE_RATE,
        bitDepth: 16
    });
    const fileStream = fs.createWriteStream(DEBUG_FILE);
    fileWriter.pipe(fileStream);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const audioManager = new AudioDeviceManager();
    await audioManager.initialize();
    const { defaultInputDevice } = audioManager.findDefaultDevices();

    if (!defaultInputDevice) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }

    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞: ${defaultInputDevice.name} (ID: ${defaultInputDevice.id})`);

    const arecord = spawn('arecord', [
        '-D', 'plug:default',
        '-f', 'S16_LE',
        '-c', '1', // –º–æ–Ω–æ
        '-r', SAMPLE_RATE.toString(),
        '-t', 'raw'
    ]);

    let currentState = State.LISTENING;
    let contextBuffer: Buffer[] = [];
    let processingBuffer: Buffer[] = [];
    let lastCommandTime = Date.now();
    let isCommandActive = false;

    function isSilence(audioData: Buffer): boolean {
        let sum = 0;
        for (let i = 0; i < audioData.length; i += 2) {
            sum += Math.abs(audioData.readInt16LE(i));
        }
        return (sum / (audioData.length / 2)) < SILENCE_THRESHOLD;
    }

    function updateContextBuffer(data: Buffer) {
        contextBuffer.push(data);
        let totalSize = contextBuffer.reduce((acc, buf) => acc + buf.length, 0);
        
        while (totalSize > CONTEXT_BUFFER_SIZE) {
            const oldestBuffer = contextBuffer.shift();
            if (oldestBuffer) {
                totalSize -= oldestBuffer.length;
            }
        }
    }

    function getLastAudioData(seconds: number): Buffer {
        const targetSize = SAMPLE_RATE * seconds * 2;
        let result: Buffer[] = [];
        let totalSize = 0;
        
        for (let i = contextBuffer.length - 1; i >= 0; i--) {
            const buffer = contextBuffer[i];
            result.unshift(buffer);
            totalSize += buffer.length;
            if (totalSize >= targetSize) break;
        }
        
        return Buffer.concat(result);
    }

    function processCommand(audioData: Buffer) {
        if (recognizer.acceptWaveform(audioData)) {
            const result = recognizer.result();
            if (result.text && result.text.toLowerCase().includes('–∞–ª–∏—Å–∞')) {
                console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!');
                console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', result.text);

                isCommandActive = true;
                lastCommandTime = Date.now();
                currentState = State.PROCESSING;
            }
        }
    }

    function updateStatus() {
        const status = currentState === State.LISTENING ? 'üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã' : 'üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã';
        const timeSinceLastCommand = Math.floor((Date.now() - lastCommandTime) / 1000);
        process.stdout.write(`\r${status} (${timeSinceLastCommand}—Å) `);
    }

    function cleanup() {
        try {
            arecord.kill();
            fileWriter.end();
            recognizer.free();
            model.free();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤:', err);
        }
    }

    arecord.stdout.on('data', (data: Buffer) => {
        fileWriter.write(data);
        updateContextBuffer(data);
        processingBuffer.push(data);
        
        const totalSize = processingBuffer.reduce((acc, buf) => acc + buf.length, 0);
        if (totalSize >= PROCESSING_BUFFER_SIZE) {
            const audioData = Buffer.concat(processingBuffer);
            processingBuffer = [];
            
            const silence = isSilence(audioData);
            processCommand(audioData);
            
            if (currentState === State.PROCESSING && silence) {
                const silenceDuration = (Date.now() - lastCommandTime) / 1000;
                if (silenceDuration > 1) { // –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
                    console.log('\nüîç –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    currentState = State.LISTENING;
                    isCommandActive = false;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            updateStatus();
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    arecord.stderr.on('data', (data: Buffer) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', data.toString());
    });

    arecord.on('error', (err: Error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞:', err);
        cleanup();
    });


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
        console.log('\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...');
        cleanup();
        process.exit(0);
    });

    console.log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω. –ì–æ–≤–æ—Ä–∏—Ç–µ...');
    console.log(`–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤: ${DEBUG_FILE}`);
    console.log('–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∫–∞–∂–∏—Ç–µ "–∞–ª–∏—Å–∞"');
}

main().catch(console.error); 