import AudioDeviceManager from './voice-device';
import { AskHasyx, ensureOpenRouterApiKey } from 'hasyx/lib/ask-hasyx';
import AdmZip from 'adm-zip';
import path from 'path';
// @ts-ignore
import * as vosk from 'vosk';
import * as fs from 'fs';
import * as https from 'https';
import { spawn } from 'child_process';

const DEFAULT_MODEL_STT = 'vosk-model-small-ru-0.22';
const MODEL_PATH = path.resolve(__dirname, './models', DEFAULT_MODEL_STT);
const SAMPLE_RATE = 16000;

/**
 * –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (Bluetooth, USB, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
 * - –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (Linux: ALSA/PulseAudio, Windows/macOS: RtAudio)
 * - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (headset +50, Bluetooth +20, USB +20)
 */
class Voice{
    private apikey: string;
    private model?: string;
    private temperature?: number;
    private max_tokens?: number;
    private system_prompt?: string;
    private output_handlers: any;
    private defaultInputDevice: any;
    private defaultOutputDevice: any;
    private devices: any[];
    private name: string;
    private silenceThreshold: number;
    private isProcessing: boolean = false;
    private currentAbortController?: AbortController;
    private askInstance?: AskHasyx;
    
    constructor(
        apikey?: string, 
        model?: string, 
        system_prompt?: string,
        name: string = '–∞–ª–∏—Å–∞',
        autoInit: boolean = true,
        temperature?: number, 
        max_tokens?: number, 
        defaultInputDevice?: any,
        defaultOutputDevice?: any,
        devices?: any[],
        silenceThreshold: number = 2000
    ) {
        this.apikey = apikey || process.env.OPENROUTER_API_KEY || '';
        this.model = model;
        this.temperature = temperature;
        this.max_tokens = max_tokens;
        
        this.system_prompt = system_prompt || `–¢—ã - –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ "${name}". –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–µ–±–µ –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–º—É –∏–º–µ–Ω–∏. 
        –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è. 
        –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: <VOICE>–¢–ï–ö–°–¢_–î–õ–Ø_–û–ó–í–£–ß–ö–ò</VOICE>
        –í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ. 
        –°—Ç–∞—Ä–∞–π—Å—è –¥–∞–≤–∞—Ç—å —á–µ—Ç–∫–∏–µ –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–±–Ω–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ —Å–ª—É—Ö.
        
        –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.`;
        
        this.output_handlers = {};
        this.defaultInputDevice = defaultInputDevice;
        this.defaultOutputDevice = defaultOutputDevice;
        this.devices = devices || [];
        this.name = name.toLowerCase();
        this.silenceThreshold = silenceThreshold;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (autoInit) this.initialize();
    }

    private async initialize(): Promise<void> {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            await this.device();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
            await this.modelSTT();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AskHasyx –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            await this.initializeAskInstance();
            
            // –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await this.transcribe();

            // await this.ask('–≤—ã–≤–µ–¥–∏ –º–Ω–µ —Ç–æ—á–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    private async initializeAskInstance(): Promise<void> {
        await ensureOpenRouterApiKey();
        
        const options: any = {
            stream: true,
            system_prompt: this.system_prompt
        };
        if (this.model) options.model = this.model;
        if (this.temperature) options.temperature = this.temperature;
        if (this.max_tokens) options.max_tokens = this.max_tokens;
        
        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        this.askInstance = new AskHasyx(
            this.apikey,
            {},
            options,
            this.system_prompt
        );
        
        console.log('‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –ò–ò –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏');
    }

    private interruptCurrentProcess(): void {
        if (this.isProcessing) {
            console.log('üõë –ü—Ä–µ—Ä—ã–≤–∞—é —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å...');
            
            // –û—Ç–º–µ–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ò–ò
            if (this.currentAbortController) {
                this.currentAbortController.abort();
            }
            
            this.isProcessing = false;
        }
    }

    public async device(): Promise<void> {
        const manager = new AudioDeviceManager();
        await manager.initialize();
        
        const { defaultInputDevice, defaultOutputDevice } = manager.findDefaultDevices();
        const devices = manager.getDevices();
        
        this.defaultInputDevice = defaultInputDevice;
        this.defaultOutputDevice = defaultOutputDevice;
        this.devices = devices;

        console.log('–ù–∞–π–¥–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:');
        console.log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω:', this.defaultInputDevice?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        console.log('–î–∏–Ω–∞–º–∏–∫–∏:', this.defaultOutputDevice?.name || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    public async modelSTT(): Promise<void> {
        if (fs.existsSync(path.resolve(__dirname, './models', DEFAULT_MODEL_STT))) {
            console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${DEFAULT_MODEL_STT} –Ω–∞–π–¥–µ–Ω–∞.`);
            return;
        }

        const modelUrl = 'https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip';
        const zipPath = path.resolve(__dirname, './models/vosk-model.zip');
        
        if (fs.existsSync(zipPath)) {
            console.log('üóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π zip-—Ñ–∞–π–ª –º–æ–¥–µ–ª–∏...');
            fs.unlinkSync(zipPath);
        }

        console.log('‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...');
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å ${modelUrl}`);
        
        await new Promise<void>((resolve, reject) => {
            const file = fs.createWriteStream(zipPath);
            let downloadedBytes = 0;
            let totalBytes = 0;

            https.get(modelUrl, (response) => {
                totalBytes = parseInt(response.headers['content-length'] || '0', 10);
                console.log(`üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(totalBytes / 1024 / 1024).toFixed(2)}MB`);
                
                response.on('data', (chunk) => {
                    downloadedBytes += chunk.length;
                    const progress = (downloadedBytes / totalBytes * 100).toFixed(2);
                    process.stdout.write(`\rüì• –ó–∞–≥—Ä—É–∑–∫–∞: ${progress}% (${(downloadedBytes / 1024 / 1024).toFixed(2)}MB)`);
                });

                response.on('end', () => {
                    process.stdout.write('\n');
                    file.end();
                });

                response.pipe(file);
                
                file.on('finish', () => {
                    file.close();
                    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
                    resolve();
                });
            }).on('error', (err) => {
                fs.unlink(zipPath, () => {});
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏:', err);
                reject(err);
            });
        });
    
        try {
            console.log('üì¶ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –º–æ–¥–µ–ª–∏...');
            const zip = new AdmZip(zipPath);
            const zipEntries = zip.getEntries();
            const rootDir = zipEntries[0].entryName.split('/')[0];
            
            console.log(`üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ${zipEntries.length} —Ñ–∞–π–ª–æ–≤...`);
            
            const modelsDir = path.resolve(__dirname, './models');
            if (!fs.existsSync(modelsDir)) {
                fs.mkdirSync(modelsDir, { recursive: true });
            }
            
            zip.extractAllTo(modelsDir, true);
            console.log(`üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${zipEntries.length} —Ñ–∞–π–ª–æ–≤`);
            
            console.log('üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
            fs.renameSync(path.resolve(modelsDir, rootDir), MODEL_PATH);
            
            console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏:', err);
            if (fs.existsSync(zipPath)) {
                fs.unlinkSync(zipPath);
                console.log('üóëÔ∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π zip-—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.');
            }
            throw err;
        } finally {
            if (fs.existsSync(MODEL_PATH) && fs.existsSync(zipPath)) {
                fs.unlinkSync(zipPath);
                console.log('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π zip-—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω.');
            }
        }
    }

    public async ask(command: string): Promise<string> {
        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        this.interruptCurrentProcess();
        
        this.isProcessing = true;
        this.currentAbortController = new AbortController();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if (!this.askInstance) {
                await this.initializeAskInstance();
            }
            
            console.log('\nü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...');
            
            let fullResponse = '';
            let currentVoiceText = '';
            let isInsideVoiceTag = false;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            const stream = await this.askInstance!.askStream(command);
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            const splitIntoSentences = (text: string): string[] => {
                return text.split(/(?<=[.!?])\s+/).filter(s => s.trim().length > 0);
            };

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            const processAccumulatedText = async (text: string) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ TTS
                if (this.currentAbortController?.signal.aborted) return;
                
                const sentences = splitIntoSentences(text);
                for (const sentence of sentences) {
                    if (sentence.trim() && !this.currentAbortController?.signal.aborted) {
                        await this.TTS(sentence.trim());
                    }
                }
            };
            
            return new Promise((resolve, reject) => {
                stream.subscribe({
                    next: async (chunk: string) => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                        if (this.currentAbortController?.signal.aborted) {
                            reject(new Error('–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'));
                            return;
                        }
                        
                        process.stdout.write(chunk);
                        fullResponse += chunk;
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–æ–≤
                        for (let i = 0; i < chunk.length; i++) {
                            const char = chunk[i];
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–≥–∞
                            if (chunk.slice(i, i + 7) === '<VOICE>') {
                                isInsideVoiceTag = true;
                                i += 6; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–≥–∞
                                continue;
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–≥–∞
                            if (chunk.slice(i, i + 8) === '</VOICE>') {
                                isInsideVoiceTag = false;
                                i += 7; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–≥–∞
                                
                                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                if (currentVoiceText.trim()) {
                                    await processAccumulatedText(currentVoiceText);
                                    currentVoiceText = '';
                                }
                                continue;
                            }
                            
                            // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                            if (isInsideVoiceTag) {
                                currentVoiceText += char;
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                                if (['.', '!', '?'].includes(char)) {
                                    const sentences = splitIntoSentences(currentVoiceText);
                                    if (sentences.length > 1) {
                                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                                        for (let j = 0; j < sentences.length - 1; j++) {
                                            if (!this.currentAbortController?.signal.aborted) {
                                                await this.TTS(sentences[j].trim());
                                            }
                                        }
                                        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä–µ
                                        currentVoiceText = sentences[sentences.length - 1];
                                    }
                                }
                            }
                        }
                    },
                    error: (error: any) => {
                        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
                        reject(error);
                    },
                    complete: async () => {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                        if (currentVoiceText.trim() && !this.currentAbortController?.signal.aborted) {
                            await processAccumulatedText(currentVoiceText);
                        }
                        console.log('\n‚úÖ –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–ª—É—á–µ–Ω');
                        resolve(fullResponse);
                    }
                });
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error);
            return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏';
        } finally {
            this.isProcessing = false;
        }
    }

    public async transcribe(): Promise<void> {
        console.log('üé§ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...');
        console.log(`üîë –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: "${this.name}"`);
    
        if (!fs.existsSync(MODEL_PATH)) {
            console.error(`‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${MODEL_PATH}`);
            console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∏—Ç—å...');
            await this.modelSTT();
            if (!fs.existsSync(MODEL_PATH)) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –í—ã—Ö–æ–¥.');
                return;
            }
        }
    
        vosk.setLogLevel(-1);
        const model = new vosk.Model(MODEL_PATH);
        const recognizer = new vosk.Recognizer({ model: model, sampleRate: SAMPLE_RATE });
    
        // –°–æ–∑–¥–∞–µ–º AudioDeviceManager –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
        const deviceManager = new AudioDeviceManager();
        await deviceManager.initialize();
        
        // –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        const bestInputDevice = await deviceManager.getBestInputDevice();
        
        if (!bestInputDevice) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞. –í—ã—Ö–æ–¥.');
            recognizer.free();
            model.free();
            return;
        }
        
        console.log(`üéß –ò—Å–ø–æ–ª—å–∑—É—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞: ${bestInputDevice.name} (ID: ${bestInputDevice.id})`);
    
        // –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
        let arecord: any;
        let audioStream: NodeJS.ReadableStream | null = null;
        
        if (deviceManager.requiresRtAudio()) {
            // Windows/macOS: –∏—Å–ø–æ–ª—å–∑—É–µ–º RtAudio –Ω–∞–ø—Ä—è–º—É—é
            try {
                console.log('üîß –ò—Å–ø–æ–ª—å–∑—É—é RtAudio –¥–ª—è Windows/macOS');
                audioStream = await deviceManager.recordAudioStream(bestInputDevice, SAMPLE_RATE, 1);
                
                // –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-–ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                arecord = {
                    stdout: audioStream,
                    stderr: { on: () => {} },
                    on: (event: string, callback: Function) => {
                        if (event === 'close') {
                            audioStream?.on('end', () => callback(0));
                        }
                    },
                    kill: () => {
                        deviceManager.stopAudioStream();
                        if (audioStream && 'destroy' in audioStream) {
                            (audioStream as any).destroy();
                        }
                    }
                };
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RtAudio:', error);
                recognizer.free();
                model.free();
                return;
            }
        } else {
            // Linux: –∏—Å–ø–æ–ª—å–∑—É–µ–º arecord
            try {
                const recordCommand = deviceManager.getRecordCommand(bestInputDevice, SAMPLE_RATE);
                console.log(`üîß –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏: ${recordCommand.join(' ')}`);
                arecord = spawn(recordCommand[0], recordCommand.slice(1));
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏, –∏—Å–ø–æ–ª—å–∑—É—é fallback:', error);
                const recordCommand = deviceManager.getRecordCommand(bestInputDevice, SAMPLE_RATE);
                console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏: ${recordCommand.join(' ')}`);
                arecord = spawn(recordCommand[0], recordCommand.slice(1));
            }
        }

        let lastPartialResult = '';
        let commandBuffer: string[] = [];
        let isListening = false;
        let lastSpeechTime = Date.now();
        let isProcessing = false;
        let currentInputDevice = bestInputDevice;

        const checkSilence = async (–ª) => {
            if (isListening && !isProcessing && (Date.now() - lastSpeechTime) > this.silenceThreshold) {
                if (commandBuffer.length > 0) {
                    const fullCommand = commandBuffer.join(' ');
                    console.log('\nüìù –ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', fullCommand);
                    
                    // –°–±—Ä–æ—Å –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    commandBuffer = [];
                    isListening = false;
                    isProcessing = true;
                    
                    try {
                        await this.ask(fullCommand);
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:', error);
                    }
                    
                    isProcessing = false;
                    console.log('\nüëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...');
                }
            }
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–¥–ª—è Bluetooth)
        const checkDeviceChanges = async () => {
            if (!isProcessing) {
                try {
                    const newBestDevice = await deviceManager.getBestInputDevice();
                    if (newBestDevice && newBestDevice.id !== currentInputDevice?.id) {
                        console.log(`\nüîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ª—É—á—à–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${newBestDevice.name}`);
                        console.log('‚ö†Ô∏è –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
                        currentInputDevice = newBestDevice;
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
                }
            }
        };

        const silenceCheckInterval = setInterval(checkSilence, 100);
        const deviceCheckInterval = setInterval(checkDeviceChanges, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
        arecord.stdout.on('data', (data) => {
            if (recognizer.acceptWaveform(data)) {
                const result = recognizer.result();
                if (result.text) {
                    const text = result.text.toLowerCase();
                    console.log(`\nüîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${text}"`);
                    lastSpeechTime = Date.now();

                    if (!isListening && text.includes(this.name)) {
                        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                        this.interruptCurrentProcess();
                        
                        isListening = true;
                        console.log(`\nüéØ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${this.name}" –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...`);
                        commandBuffer.push(result.text);
                        console.log(`üé§ –ö–æ–º–∞–Ω–¥–∞: ${result.text}`);
                        lastPartialResult = '';
                        return;
                    }

                    if (isListening) {
                        const lastBuffer = commandBuffer[commandBuffer.length - 1] || '';
                        if (!lastBuffer.includes(text) && !text.includes(lastBuffer)) {
                            commandBuffer.push(result.text);
                            console.log(`üé§ –ö–æ–º–∞–Ω–¥–∞: ${result.text}`);
                        }
                        lastPartialResult = '';
                    }
                }
            } else {
                const partialResult = recognizer.partialResult();
                if (partialResult.partial) {
                    // console.log(`\nüîÑ –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${partialResult.partial}"`);
                    if (isListening && partialResult.partial !== lastPartialResult) {
                        console.log(`üé§ –ö–æ–º–∞–Ω–¥–∞: ${partialResult.partial}`);
                        lastPartialResult = partialResult.partial;
                    }
                }
            }
        });
    
        arecord.stderr.on('data', (data) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ arecord: ${data}`);
        });
    
        const cleanup = () => {
            console.log('\n–í—ã–ø–æ–ª–Ω—è—é –æ—á–∏—Å—Ç–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
            clearInterval(silenceCheckInterval);
            clearInterval(deviceCheckInterval);
            arecord.kill();
            if (deviceManager.requiresRtAudio()) {
                deviceManager.stopAudioStream();
            }
            recognizer.free();
            model.free();
        };
        
        process.on('SIGINT', () => {
            cleanup();
            process.exit(0);
        });
        
        arecord.on('close', (code) => {
            if (code !== 0 && code !== null) { 
                 console.log(`arecord –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
            }
            cleanup();
        });
    
        console.log('‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω. –ì–æ–≤–æ—Ä–∏—Ç–µ... (–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C)');
        console.log('üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...');
    }

    public async TTS(text: string): Promise<void> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ TTS
        if (this.currentAbortController?.signal.aborted) {
            console.log('üõë TTS –ø—Ä–µ—Ä–≤–∞–Ω');
            return;
        }
        
        const startTime = Date.now();
        console.log(`üìù –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏: "${text}"`);        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è TTS
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–∏–Ω—Ç–µ–∑–∞
        
        const endTime = Date.now();
        console.log('‚úÖ –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
const voice = new Voice();

// –ò–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
// const voice = new Voice(
//     process.env.OPENROUTER_API_KEY!,
//     undefined,
//     undefined,
//     undefined,
//     undefined,
//     undefined,
//     undefined,
//     undefined,
//     '–∞–ª–∏—Å–∞', // –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
//     2000    // –ø–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
// );

