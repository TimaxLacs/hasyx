// lib/hasura-schema.ts
import axios from 'axios';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { IntrospectionQuery, getIntrospectionQuery } from 'graphql'; // Use standard introspection query function

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
dotenv.config({ path: path.resolve(__dirname, '../.env') });

const HASURA_GRAPHQL_URL = process.env.NEXT_PUBLIC_HASURA_GRAPHQL_URL;
const HASURA_ADMIN_SECRET = process.env.HASURA_ADMIN_SECRET;
const OUTPUT_PATH = path.resolve(__dirname, '../public/hasura-schema.json');

if (!HASURA_GRAPHQL_URL) {
  console.error('‚ùå –û—à–∏–±–∫–∞: NEXT_PUBLIC_HASURA_GRAPHQL_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env');
  process.exit(1);
}

async function fetchSchema() {
  console.log(`üöÄ –ó–∞–ø—Ä–æ—Å —Å—Ö–µ–º—ã –∏–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ü–∏–∏ —Å ${HASURA_GRAPHQL_URL}...`);
  try {
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };
    if (HASURA_ADMIN_SECRET) {
      headers['X-Hasura-Admin-Secret'] = HASURA_ADMIN_SECRET;
      console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Hasura Admin Secret.');
    } else {
       console.warn('‚ö†Ô∏è HASURA_ADMIN_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å —Å—Ö–µ–º—ã –±–µ–∑ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º).');
    }

    const response = await axios.post(
      HASURA_GRAPHQL_URL!, // Add non-null assertion here
      {
        query: getIntrospectionQuery(), // Use the function to get the query string
      },
      { headers }
    );

    if (response.data.errors) {
       throw new Error(`–û—à–∏–±–∫–∞ GraphQL –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ö–µ–º—ã: ${JSON.stringify(response.data.errors)}`);
    }

    if (!response.data || !response.data.data || !response.data.data.__schema) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Hasura. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data.__schema.');
    }


    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å __schema)
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é schema.js, –Ω–æ —Ç–æ–ª—å–∫–æ —Å __schema
    // const structuredSchema = {
    //   __schema: response.data.data.__schema
    // };
    // –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ü–∏–∏, codegen –µ–≥–æ –ø–æ–π–º–µ—Ç
    const introspectionResult = response.data; 

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã –≤ ${OUTPUT_PATH}...`);
    fs.writeFileSync(OUTPUT_PATH, JSON.stringify(introspectionResult, null, 2)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    console.log(`‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ${OUTPUT_PATH}`);
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error.response?.data || error.message || error);
    process.exit(1);
  }
}

fetchSchema(); 