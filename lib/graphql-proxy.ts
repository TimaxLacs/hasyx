import { NextRequest, NextResponse } from 'next/server';
import http from 'http';
import ws, { WebSocket, WebSocketServer } from 'ws';
import { getToken } from 'next-auth/jwt';
import Debug from 'hasyx/lib/debug';
import { generateJWT, verifyJWT, getHasuraClaimsFromPayload } from 'hasyx/lib/jwt';

const debugGraphql = Debug('graphql:proxy');

let HASURA_ENDPOINT: string | undefined;
let HASURA_WS_ENDPOINT: string | undefined;
let HASURA_ADMIN_SECRET: string | undefined;
let NEXTAUTH_SECRET: string | undefined;

if (typeof window === 'undefined') {
  // --- Environment Variables --- (Moved here, consider centralizing further)
  HASURA_ENDPOINT = process.env.NEXT_PUBLIC_HASURA_GRAPHQL_URL;
  HASURA_WS_ENDPOINT = HASURA_ENDPOINT?.replace('https', 'wss').replace('http', 'ws');
  HASURA_ADMIN_SECRET = process.env.HASURA_ADMIN_SECRET;
  NEXTAUTH_SECRET = process.env.NEXTAUTH_SECRET;

  // --- Basic Checks --- (Moved here)
  if (!HASURA_ENDPOINT) {
    console.error("‚ùå CRITICAL: NEXT_PUBLIC_HASURA_GRAPHQL_URL environment variable is not set.");
    debugGraphql("‚ùå CRITICAL: NEXT_PUBLIC_HASURA_GRAPHQL_URL environment variable is not set.");
  }
  if (!HASURA_WS_ENDPOINT) {
    console.error("‚ùå CRITICAL: Cannot derive WebSocket endpoint from NEXT_PUBLIC_HASURA_GRAPHQL_URL.");
    debugGraphql("‚ùå CRITICAL: Cannot derive WebSocket endpoint from NEXT_PUBLIC_HASURA_GRAPHQL_URL.");
  }
  if (!HASURA_ADMIN_SECRET) {
    // Allow Admin Secret to be optional for WS if only JWT is used, but log warning
    console.warn("‚ö†Ô∏è WARNING: HASURA_ADMIN_SECRET environment variable is not set. Anonymous WS access will fail.");
    debugGraphql("‚ö†Ô∏è WARNING: HASURA_ADMIN_SECRET environment variable is not set. Anonymous WS access will fail.");
  }
  if (!NEXTAUTH_SECRET) {
    console.error("‚ùå CRITICAL: NEXTAUTH_SECRET environment variable is not set.");
    debugGraphql("‚ùå CRITICAL: NEXTAUTH_SECRET environment variable is not set.");
  }
}

// --- NextAuth Token Interface --- (Moved here)
interface NextAuthToken {
  sub?: string;
  name?: string;
  email?: string;
  'https://hasura.io/jwt/claims'?: {
    'x-hasura-default-role'?: string;
    'x-hasura-allowed-roles'?: string[];
    'x-hasura-user-id'?: string;
    [key: string]: any;
  };
  [key: string]: any;
}

interface HasuraClaims {
  'x-hasura-allowed-roles': string[];
  'x-hasura-default-role': string;
  'x-hasura-user-id': string;
  [key: string]: any;
}

// CORS headers to be used consistently
export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Hasura-Role, X-Hasura-User-Id, apollo-require-preflight, X-Apollo-Operation-Name, X-Apollo-Operation-Id, X-Apollo-Tracing, x-apollo-tracing',
  'Access-Control-Allow-Credentials': 'true',
  'Access-Control-Max-Age': '86400'
};

// =======================================================================
// GET Handler Logic
// =======================================================================
export async function proxyGET(request: NextRequest): Promise<NextResponse> {
  debugGraphql('Executing proxyGET');
  return NextResponse.json({
    status: 'ok',
    message: 'GraphQL API and WebSocket proxy active',
    endpoints: {
      http: '/api/graphql',
      ws: '/api/graphql' // WebSocket uses the same endpoint via upgrade
    },
    hasura_endpoint: HASURA_ENDPOINT,
  }, { headers: corsHeaders });
}

// =======================================================================
// OPTIONS Handler Logic
// =======================================================================
export async function proxyOPTIONS(request: NextRequest): Promise<NextResponse> {
  debugGraphql('Executing proxyOPTIONS');
  const origin = request.headers.get('origin') || '*';
  debugGraphql(`OPTIONS request from origin: ${origin}`);
  
  return new NextResponse(null, {
    status: 204,
    headers: corsHeaders
  });
}

// =======================================================================
// Helper: –ü–æ–ª—É—á–µ–Ω–∏–µ Hasura Claims (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Bearer, –ø–æ—Ç–æ–º NextAuth Cookie - –ø–æ–∫–∞ —É–±—Ä–∞–Ω–æ)
// =======================================================================
async function getClaimsForRequest(request: NextRequest | http.IncomingMessage): Promise<HasuraClaims | null> {
  debugGraphql('Attempting to get claims for request...');
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Bearer Token
  let bearerToken: string | null = null;
  if (request instanceof NextRequest) {
    bearerToken = request.headers.get('Authorization')?.split('Bearer ')?.[1] ?? null;
  } else if (request.headers.authorization) {
    bearerToken = request.headers.authorization.split('Bearer ')?.[1] ?? null;
  }

  if (bearerToken) {
    debugGraphql('Bearer token found. Verifying...');
    try {
      const payload = await verifyJWT(bearerToken); 
      const claims = getHasuraClaimsFromPayload(payload);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (claims && 
          claims['x-hasura-allowed-roles'] && 
          claims['x-hasura-default-role'] && 
          claims['x-hasura-user-id']) 
      {
        debugGraphql('Bearer token verified successfully. Using claims:', claims);
        return claims as HasuraClaims; // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      }
      debugGraphql('Bearer token valid, but Hasura claims are incomplete or missing.');
    } catch (error: any) {
      debugGraphql('Bearer token verification failed:', error.message);
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ NextAuth Cookie (–ü–û–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ê –î–õ–Ø –£–ü–†–û–©–ï–ù–ò–Ø - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –¥–ª—è same-origin)
  /*
  if (!NEXTAUTH_SECRET) {
      debugGraphql('Skipping NextAuth cookie check: NEXTAUTH_SECRET not set.');
      return null;
  }
  try {
      const nextAuthToken = await getToken({
          req: request as any, // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–π
          secret: NEXTAUTH_SECRET
      }) as NextAuthToken | null;

      if (nextAuthToken?.['https://hasura.io/jwt/claims']) {
          debugGraphql('NextAuth session token found and verified. Using claims:', nextAuthToken['https://hasura.io/jwt/claims']);
          return nextAuthToken['https://hasura.io/jwt/claims'] as HasuraClaims;
      }
  } catch (error: any) {
      debugGraphql('Error verifying NextAuth session token:', error.message);
  }
  */

  debugGraphql('No valid Bearer token with complete claims found.');
  return null;
}

// =======================================================================
// POST Handler Logic
// =======================================================================
export async function proxyPOST(request: NextRequest): Promise<NextResponse> {
  debugGraphql('--- proxyPOST Start ---');
  
  if (!HASURA_ENDPOINT) {
      const errorMsg = 'Hasura HTTP endpoint is not configured on the server.';
      console.error(`‚ùå ${errorMsg}`);
      debugGraphql(`‚ùå ${errorMsg}`);
      return NextResponse.json({ errors: [{ message: errorMsg }] }, { 
        status: 500,
        headers: corsHeaders
      });
  }

  try {
    const body = await request.json();
    const queryStr = JSON.stringify(body).substring(0, 200);
    debugGraphql(`üì§ GraphQL Query Received (preview): ${queryStr}...`);

    const headers: HeadersInit = {
      'Content-Type': 'application/json',
    };

    // –ü–æ–ª—É—á–∞–µ–º Hasura claims
    const claims = await getClaimsForRequest(request);

    if (claims) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å claims (–∏–∑ Bearer —Ç–æ–∫–µ–Ω–∞), –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
      headers['X-Hasura-Role'] = claims['x-hasura-default-role'];
      headers['X-Hasura-User-Id'] = claims['x-hasura-user-id'];
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ claims, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å X-Hasura-
      Object.keys(claims).forEach(key => {
        if (key.toLowerCase().startsWith('x-hasura-')) {
          headers[key] = claims[key];
        }
      });
      debugGraphql('üîë Forwarding request with Hasura claims from token.', { role: claims['x-hasura-default-role'], userId: claims['x-hasura-user-id'] });
    } else if (HASURA_ADMIN_SECRET) {
      // –ï—Å–ª–∏ claims –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Å–µ–∫—Ä–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      // (–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Hasura, –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ä–æ–ª—å—é admin, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞)
      // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ anonymous, Hasura –æ–∂–∏–¥–∞–µ—Ç X-Hasura-Role
      headers['x-hasura-admin-secret'] = HASURA_ADMIN_SECRET;
      debugGraphql('üîë No claims found. Forwarding request with Hasura Admin Secret.');
    } else {
       // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ claims, –Ω–∏ —Å–µ–∫—Ä–µ—Ç–∞ - –æ—à–∏–±–∫–∞
       const errorMsg = 'Cannot forward request: No authentication credentials (Bearer/Admin Secret) available.';
       console.error(`‚ùå ${errorMsg}`);
       debugGraphql(`‚ùå ${errorMsg}`);
       return NextResponse.json({ errors: [{ message: errorMsg }] }, { status: 401, headers: corsHeaders });
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –µ–≥–æ –≤ Hasura
    delete headers['Authorization']; 

    debugGraphql(`üîó Sending request to Hasura HTTP: ${HASURA_ENDPOINT}`);
    const hasuraResponse = await fetch(HASURA_ENDPOINT, {
      method: 'POST',
      headers,
      body: JSON.stringify(body),
    });

    const data = await hasuraResponse.json();

    if (data.errors) {
      console.error('‚ùå Error response from Hasura:', JSON.stringify(data.errors));
      debugGraphql('‚ùå Error response from Hasura:', JSON.stringify(data.errors));
    } else {
      debugGraphql('‚úÖ Successful response from Hasura HTTP.');
    }

    debugGraphql('--- proxyPOST End ---');
    return NextResponse.json(data, {
      status: hasuraResponse.status,
      headers: corsHeaders
    });

  } catch (error: any) {
    console.error('‚ùå Error proxying HTTP GraphQL request:', error.stack || error);
    debugGraphql('‚ùå Error proxying HTTP GraphQL request:', error.message);
    debugGraphql('--- proxyPOST End (Error) ---');

    return NextResponse.json(
      {
        errors: [
          {
            message: 'Error processing GraphQL request via proxy.',
            extensions: {
              code: 'INTERNAL_SERVER_ERROR',
              path: 'graphql-proxy-http'
            }
          }
        ]
      },
      { 
        status: 500,
        headers: corsHeaders
      }
    );
  }
}

// =======================================================================
// SOCKET Handler Logic
// =======================================================================
export async function proxySOCKET(
  client: WebSocket,
  request: http.IncomingMessage,
  server: WebSocketServer
): Promise<void> {
  const clientId = Math.random().toString(36).substring(2, 8); // Shorter ID
  debugGraphql(`--- proxySOCKET [${clientId}] Start ---`);

  if (!HASURA_WS_ENDPOINT) {
    console.error(`‚ùå [${clientId}] Hasura WebSocket endpoint not configured.`);
    debugGraphql(`‚ùå [${clientId}] Hasura WebSocket endpoint not configured.`);
    client.close(1011, 'WebSocket endpoint not configured');
    return;
  }
  if (!NEXTAUTH_SECRET) {
    console.error(`‚ùå [${clientId}] NEXTAUTH_SECRET not configured.`);
    debugGraphql(`‚ùå [${clientId}] NEXTAUTH_SECRET not configured.`);
    client.close(1011, 'Server authentication secret not configured');
    return;
  }

  let hasuraWs: WebSocket | null = null;
  let clientConnectionInitialized = false;
  let hasuraConnectionInitialized = false;

  const closeConnections = (code = 1000, reason = 'Closing connection') => {
    debugGraphql(`[${clientId}] Closing connections: Code=${code}, Reason=${reason}`);
    if (client.readyState === WebSocket.OPEN || client.readyState === WebSocket.CONNECTING) {
      try { client.close(code, reason); } catch (err: any) {}
    }
    if (hasuraWs && (hasuraWs.readyState === WebSocket.OPEN || hasuraWs.readyState === WebSocket.CONNECTING)) {
      hasuraWs.close(code, reason);
    }
    debugGraphql(`[${clientId}] Connections closed.`);
  };

  try {
    // –ü–æ–ª—É—á–∞–µ–º claims –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç Bearer)
    const claims = await getClaimsForRequest(request);
    const wsHeaders: Record<string, string> = {};

    if (claims) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å claims (–∏–∑ Bearer —Ç–æ–∫–µ–Ω–∞ –≤ initial request headers)
      // Hasura –æ–∂–∏–¥–∞–µ—Ç claims –≤ payload –ø—Ä–∏ connection_init, –Ω–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö ws
      debugGraphql(`üîë [${clientId}] Using claims from verified Bearer token for WS payload.`);
    } else {
      // –ï—Å–ª–∏ claims –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ä–æ–ª—å
      debugGraphql(`üë§ [${clientId}] No claims found. Using anonymous role for WS payload.`);
      // –ê–Ω–æ–Ω–∏–º–Ω—ã–µ claims –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ –ª–µ—Ç—É –ø—Ä–∏ connection_init
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Hasura WS
    debugGraphql(`üîó [${clientId}] Establishing WebSocket connection to Hasura: ${HASURA_WS_ENDPOINT}`);
    hasuraWs = new ws(HASURA_WS_ENDPOINT, ['graphql-transport-ws'], { headers: wsHeaders }); // Headers –∑–¥–µ—Å—å –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è auth

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π --- 
    client.on('message', async (message) => {
       // ... (–ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞) ...
       const msgData = JSON.parse(message.toString());
       debugGraphql(`[${clientId}] --> Received from Client: ${message.toString().substring(0, 200)}...`);

       if (msgData.type === 'connection_init') {
         clientConnectionInitialized = true;
         debugGraphql(`[${clientId}] Client initialized connection.`);
         
         // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º connection_init –≤ Hasura —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ claims –≤ payload
         const hasuraInitPayload: { headers?: Record<string, string> } = {};
         if (claims) {
            // –ü–µ—Ä–µ–¥–∞–µ–º claims –∏–∑ —Ç–æ–∫–µ–Ω–∞
            hasuraInitPayload.headers = { ...claims }; // Hasura –æ–∂–∏–¥–∞–µ—Ç –∏—Ö –≤ headers payload
         } else {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π JWT –¥–ª—è Hasura
             try {
                const anonClaims = {
                  'x-hasura-allowed-roles': ['anonymous'],
                  'x-hasura-default-role': 'anonymous',
                  'x-hasura-user-id': `anon-${clientId}` 
                };
                const anonJwt = await generateJWT(`anon-${clientId}`, anonClaims);
                hasuraInitPayload.headers = { Authorization: `Bearer ${anonJwt}` }; 
             } catch (jwtError: any) {
                 debugGraphql(`‚ùå [${clientId}] Failed to generate anonymous JWT:`, jwtError.message);
                 closeConnections(1011, "Anonymous JWT generation failed");
                 return;
             }
         }
         
         const initMsg = JSON.stringify({ type: 'connection_init', payload: hasuraInitPayload });
         debugGraphql(`[${clientId}] <-- Sending to Hasura: ${initMsg}`);
         if (hasuraWs?.readyState === WebSocket.OPEN) hasuraWs.send(initMsg);
         return; // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º connection_init –¥–∞–ª—å—à–µ
       }
       
       // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Hasura, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
       if (hasuraConnectionInitialized && hasuraWs?.readyState === WebSocket.OPEN) {
         debugGraphql(`[${clientId}] <-- Forwarding to Hasura: ${message.toString().substring(0, 200)}...`);
         hasuraWs.send(message.toString());
       }
    });

    hasuraWs.on('message', (message) => {
      // ... (–ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Hasura) ...
       const msgData = JSON.parse(message.toString());
       debugGraphql(`[${clientId}] --> Received from Hasura: ${message.toString().substring(0, 200)}...`);
       
       if (msgData.type === 'connection_ack') {
          hasuraConnectionInitialized = true;
          debugGraphql(`[${clientId}] Hasura acknowledged connection.`);
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ack –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
          if (clientConnectionInitialized && client.readyState === WebSocket.OPEN) {
              debugGraphql(`[${clientId}] <-- Sending connection_ack to Client.`);
              client.send(JSON.stringify({ type: 'connection_ack' }));
          }
          return; // –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º connection_ack –¥–∞–ª—å—à–µ
       }
       
       // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
       if (clientConnectionInitialized && client.readyState === WebSocket.OPEN) {
          debugGraphql(`[${clientId}] <-- Forwarding to Client: ${message.toString().substring(0, 200)}...`);
          client.send(message.toString());
       }
    });

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è --- 
    client.on('close', (code, reason) => { 
        debugGraphql(`[${clientId}] Client disconnected: Code=${code}, Reason=${reason?.toString()}`); 
        closeConnections(code, reason?.toString()); 
    });
    client.on('error', (error) => { 
        debugGraphql(`[${clientId}] Client error: ${error.message}`); 
        closeConnections(1011, 'Client error'); 
    });
    hasuraWs.on('close', (code, reason) => { 
        debugGraphql(`[${clientId}] Hasura disconnected: Code=${code}, Reason=${reason?.toString()}`); 
        closeConnections(code, reason?.toString()); 
    });
    hasuraWs.on('error', (error) => { 
        debugGraphql(`[${clientId}] Hasura error: ${error.message}`); 
        closeConnections(1011, 'Hasura connection error'); 
    });

  } catch (error: any) {
    console.error(`‚ùå [${clientId}] Error setting up WebSocket proxy:`, error.stack || error);
    debugGraphql(`‚ùå [${clientId}] Error setting up WebSocket proxy:`, error.message);
    closeConnections(1011, 'Proxy setup error');
  }
} 