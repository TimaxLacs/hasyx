import { TBankReceipt, TBankReceiptItem } from '../tbank'; // Corrected path

/**
 * Optional configuration for the TBank Payment Processor.
 */
export interface TBankProcessorOptions {
  /**
   * Function to generate a TBankReceipt object for fiscalization.
   * If not provided, receipts will not be automatically generated by these utility functions.
   * @param paymentData - Data related to the payment (e.g., items, amount, customer email/phone).
   * @param operationType - The type of operation: 'payment', 'refund', 'confirmation_with_fiscalization'.
   * @returns A TBankReceipt object or null/undefined if no receipt is needed.
   */
  generateReceipt?: (paymentData: GenerateReceiptArgs, operationType: ReceiptOperationType) => TBankReceipt | null | undefined;
}

export type ReceiptOperationType = 'payment' | 'refund' | 'confirmation';

export interface GenerateReceiptArgs {
  items: Array<Omit<TBankReceiptItem, 'Amount' | 'Quantity'> & { quantity: number }>; // Simplified item structure, Amount will be calculated
  totalAmount: number; // Total amount of the payment/refund in kopecks
  customerEmail?: string;
  customerPhone?: string;
  paymentId: string; // Internal payment ID
  taxationSystem: TBankReceipt['Taxation']; // e.g. 'osn', 'usn_income'
  // Add any other relevant data needed to build the receipt
  // For example, details specific to the transaction or items.
}

/**
 * Default receipt generation function (stub).
 * This function should be replaced or extended with actual business logic
 * to create a valid TBankReceipt based on the transaction details.
 */
const defaultGenerateReceipt: TBankProcessorOptions['generateReceipt'] = (
  paymentData: GenerateReceiptArgs,
  operationType: ReceiptOperationType
): TBankReceipt | null | undefined => {
  console.warn(
    `TBank: generateReceipt called for paymentId ${paymentData.paymentId}, operation: ${operationType}. ` +
    `This is a stub. Implement actual receipt generation logic in lib/payments/tbank/options.ts.`
  );

  // --- Start of example/placeholder logic --- 
  // This is a very basic example and likely needs significant adjustment
  // to meet specific fiscalization requirements.

  if (!paymentData.items || paymentData.items.length === 0) {
    console.warn('TBank: No items provided for receipt generation.');
    return null; // Cannot generate receipt without items
  }
  
  // Ensure customer contact is present if required by fiscal rules
  if (!paymentData.customerEmail && !paymentData.customerPhone) {
    console.warn('TBank: Customer email or phone must be provided for receipt generation.');
    // Depending on strictness, you might return null or throw an error.
    // For now, we'll proceed but TBank might reject it.
  }

  const receiptItems: TBankReceiptItem[] = paymentData.items.map(item => ({
    ...item,
    Quantity: item.quantity,
    Amount: item.Price * item.quantity, // Price is in kopecks
    // Default PaymentMethod and PaymentObject if not specified, adjust as needed
    PaymentMethod: item.PaymentMethod || 'full_payment',
    PaymentObject: item.PaymentObject || 'commodity',
  }));

  // Ensure total amount of items matches the paymentData.totalAmount
  const calculatedTotal = receiptItems.reduce((sum, item) => sum + item.Amount, 0);
  if (calculatedTotal !== paymentData.totalAmount) {
    console.error(
      `TBank Receipt: Mismatch between calculated item total (${calculatedTotal}) and payment total (${paymentData.totalAmount}).`
    );
    // This is a critical error, likely should not proceed or should adjust items.
    // For this stub, we'll log and return null.
    return null;
  }

  const receipt: TBankReceipt = {
    Email: paymentData.customerEmail,
    Phone: paymentData.customerPhone,
    Taxation: paymentData.taxationSystem,
    Items: receiptItems,
    // EmailCompany: 'your_company_email@example.com', // Optional: Your company's email for the receipt
  };
  // --- End of example/placeholder logic ---

  // Return null to indicate no receipt should be sent by default with this stub.
  // To enable sending the generated example receipt, return `receipt` instead of `null`.
  // return receipt; 
  return null; 
};

export const defaultTBankOptions: TBankProcessorOptions = {
  generateReceipt: defaultGenerateReceipt,
}; 